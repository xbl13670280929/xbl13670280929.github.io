{"version":3,"sources":["pages/NoteA/NoteA01/NoteA01.jsx"],"names":["codeVal","Demo","useState","count1","setCount1","count2","setCount2","useEffect","console","log","className","onClick","defaultValue","style","height"],"mappings":"6JA4CMA,EAAO,mxDAoCEC,UA5EF,WACZ,MAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,KAArC,mBAAOG,EAAP,KAAeC,EAAf,KAuBA,OArBAC,qBAAU,WACTC,QAAQC,IAAI,yCAGbF,qBAAU,WACTC,QAAQC,IAAI,qCACV,IAEHF,qBAAU,WACTC,QAAQC,IAAI,wCAA0BN,KACpC,CAACA,IAEJI,qBAAU,WACTC,QAAQC,IAAI,wCAA0BJ,KACpC,CAACA,IAEJE,qBAAU,WACT,OAAO,WACNC,QAAQC,IAAI,8EAIb,eAAC,IAAD,WACC,qBAAKC,UAAU,eAAf,iDACA,sBAAKA,UAAU,mBAAf,UACC,qBAAKA,UAAU,qBAAf,4IACA,eAAC,IAAD,CAAQC,QAAS,kBAAMP,EAAUD,EAAS,IAA1C,iCAAyDA,KACzD,eAAC,IAAD,CAAQQ,QAAS,kBAAML,EAAUD,EAAS,IAA1C,iCAAyDA,KACzD,qBAAKK,UAAU,iBAAf,SACC,0BAAUE,aAAcZ,EAASa,MAAO,CAACC,OAAQ","file":"static/js/router-NoteA01.a1ba2e1d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Button } from 'antd'\r\nimport BaseLayout from '../../../layouts/BaseLayout/BaseLayout.jsx'\r\n\r\nconst Demo = () => {\r\n\tconst [count1, setCount1] = useState(0);\r\n\tconst [count2, setCount2] = useState(111);\r\n\t//默认的行为，会每次 render 后都执行，一般表单控制中使用\r\n\tuseEffect(() => {\r\n\t\tconsole.log('useEffect 没有参数')\r\n\t});\r\n\t//传空数组，空数组跟空数组是相同的，所以useEffect只会执行一次\r\n\tuseEffect(() => {\r\n\t\tconsole.log('useEffect 参数为:[]')\r\n\t}, []);\r\n\t//传空数组，空数组跟空数组是相同的，所以useEffect只会执行一次\r\n\tuseEffect(() => {\r\n\t\tconsole.log('useEffect 参数为:[count1]', count1)\r\n\t}, [count1]);\r\n\t//传空数组，空数组跟空数组是相同的，所以useEffect只会执行一次\r\n\tuseEffect(() => {\r\n\t\tconsole.log('useEffect 参数为:[count2]', count2)\r\n\t}, [count2]);\r\n\t//返回时传递一个函数进行卸载，在组件卸载时候调用\r\n\tuseEffect(() => {\r\n\t\treturn () => {\r\n\t\t\tconsole.log('useEffect 函数内部返回一个函数'); \r\n\t\t}\r\n\t});\r\n\treturn (\r\n\t\t<BaseLayout>\r\n\t\t\t<div className='note-title-a'>hooks 的 useEffect 周期</div>\r\n\t\t\t<div className=\"note-example-box\">\r\n\t\t\t\t<div className=\"note-example-intro\">hooks 主要通过 useEffect 模拟生命周期，主要有4种情况。</div>\r\n\t\t\t\t<Button onClick={() => setCount1(count1 + 1)}>变量:count1:{count1}</Button>\r\n\t\t\t\t<Button onClick={() => setCount2(count2 + 1)}>变量:count2:{count2}</Button>\r\n\t\t\t\t<div className=\"note-code-case\">\r\n\t\t\t\t\t<textarea defaultValue={codeVal} style={{height: '800px'}}></textarea>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</BaseLayout>\r\n\t);\r\n};\r\n\r\nconst codeVal = `const Demo = () => {\r\n\tconst [count1, setCount1] = useState(0);\r\n\tconst [count2, setCount2] = useState(111);\r\n\t//默认的行为，会每次 render 后都执行，一般表单控制中使用\r\n\tuseEffect(() => {\r\n\t\tconsole.log('useEffect 没有参数')\r\n\t});\r\n\t//传空数组，空数组跟空数组是相同的，所以useEffect只会执行一次\r\n\tuseEffect(() => {\r\n\t\tconsole.log('useEffect 参数为:[]')\r\n\t}, []);\r\n\t//传空数组，空数组跟空数组是相同的，所以useEffect只会执行一次\r\n\tuseEffect(() => {\r\n\t\tconsole.log('useEffect 参数为:[count1]', count1)\r\n\t}, [count1]);\r\n\t//传空数组，空数组跟空数组是相同的，所以useEffect只会执行一次\r\n\tuseEffect(() => {\r\n\t\tconsole.log('useEffect 参数为:[count2]', count2)\r\n\t}, [count2]);\r\n\t//返回时传递一个函数进行卸载，在组件卸载时候调用\r\n\tuseEffect(() => {\r\n\t\treturn () => {\r\n\t\t\tconsole.log('useEffect 函数内部返回一个函数'); \r\n\t\t}\r\n\t});\r\n\treturn (\r\n\t\t<BaseLayout>\r\n\t\t\t<div className='note-title-a'>hooks 的 useEffect 周期</div>\r\n\t\t\t<div className=\"note-example-box\">\r\n\t\t\t\t<Button onClick={() => setCount1(count1 + 1)}>变量:count1:{count1}</Button>\r\n\t\t\t\t<Button onClick={() => setCount2(count2 + 1)}>变量:count2:{count2}</Button>\r\n\t\t\t</div>\r\n\t\t</BaseLayout>\r\n\t);\r\n};`;\r\n\r\nexport default Demo;\r\n"],"sourceRoot":""}